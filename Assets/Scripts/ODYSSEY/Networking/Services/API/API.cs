// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace API
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum HandshakeVersion : uint
{
  v1 = 0,
  v2 = 1,
};

public enum ProtocolVersion : uint
{
  v1 = 0,
  v2 = 1,
};

public enum UserActionType : byte
{
  Highfive = 0,
  Fireworks = 1,
  Skybox = 2,
};

public enum WowType : byte
{
  Positive = 0,
  Negative = 1,
};

public enum ActionMetadata : byte
{
  NONE = 0,
  FireworksMetadata = 1,
  HighfiveMetadata = 2,
  WowMetadata = 3,
};

public enum Msg : byte
{
  NONE = 0,
  Handshake = 1,
  UserAction = 2,
  On3DAction = 3,
  InteractonTrigger = 4,
  SetWorld = 5,
  ObjectDefinition = 6,
  AddStaticObjects = 7,
  AddActiveObjects = 8,
  SetObjectTextures = 9,
  SetObjectStrings = 10,
  SetObjectAttributes = 11,
};

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<API.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<API.Vec3>(builder.Offset);
  }
};

public struct PosRot : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PosRot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.Vec3 Pos { get { return (new API.Vec3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public API.Vec3 Rot { get { return (new API.Vec3()).__assign(__p.bb_pos + 12, __p.bb); } }

  public static Offset<API.PosRot> CreatePosRot(FlatBufferBuilder builder, float pos_X, float pos_Y, float pos_Z, float rot_X, float rot_Y, float rot_Z) {
    builder.Prep(4, 24);
    builder.Prep(4, 12);
    builder.PutFloat(rot_Z);
    builder.PutFloat(rot_Y);
    builder.PutFloat(rot_X);
    builder.Prep(4, 12);
    builder.PutFloat(pos_Z);
    builder.PutFloat(pos_Y);
    builder.PutFloat(pos_X);
    return new Offset<API.PosRot>(builder.Offset);
  }
};

public struct ID : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ID __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong L { get { return __p.bb.GetUlong(__p.bb_pos + 0); } }
  public ulong M { get { return __p.bb.GetUlong(__p.bb_pos + 8); } }

  public static Offset<API.ID> CreateID(FlatBufferBuilder builder, ulong L, ulong M) {
    builder.Prep(8, 16);
    builder.PutUlong(M);
    builder.PutUlong(L);
    return new Offset<API.ID>(builder.Offset);
  }
};

public struct TextureDefinition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TextureDefinition GetRootAsTextureDefinition(ByteBuffer _bb) { return GetRootAsTextureDefinition(_bb, new TextureDefinition()); }
  public static TextureDefinition GetRootAsTextureDefinition(ByteBuffer _bb, TextureDefinition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TextureDefinition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Label { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(4); }
  public string Data { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<API.TextureDefinition> CreateTextureDefinition(FlatBufferBuilder builder,
      StringOffset labelOffset = default(StringOffset),
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(2);
    TextureDefinition.AddData(builder, dataOffset);
    TextureDefinition.AddLabel(builder, labelOffset);
    return TextureDefinition.EndTextureDefinition(builder);
  }

  public static void StartTextureDefinition(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(0, labelOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static Offset<API.TextureDefinition> EndTextureDefinition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.TextureDefinition>(o);
  }
};

public struct StringDefinition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StringDefinition GetRootAsStringDefinition(ByteBuffer _bb) { return GetRootAsStringDefinition(_bb, new StringDefinition()); }
  public static StringDefinition GetRootAsStringDefinition(ByteBuffer _bb, StringDefinition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringDefinition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Label { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(4); }
  public string Data { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<API.StringDefinition> CreateStringDefinition(FlatBufferBuilder builder,
      StringOffset labelOffset = default(StringOffset),
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(2);
    StringDefinition.AddData(builder, dataOffset);
    StringDefinition.AddLabel(builder, labelOffset);
    return StringDefinition.EndStringDefinition(builder);
  }

  public static void StartStringDefinition(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(0, labelOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static Offset<API.StringDefinition> EndStringDefinition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.StringDefinition>(o);
  }
};

public struct AttributeDefinition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AttributeDefinition GetRootAsAttributeDefinition(ByteBuffer _bb) { return GetRootAsAttributeDefinition(_bb, new AttributeDefinition()); }
  public static AttributeDefinition GetRootAsAttributeDefinition(ByteBuffer _bb, AttributeDefinition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttributeDefinition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Label { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(4); }
  public int Attribute { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<API.AttributeDefinition> CreateAttributeDefinition(FlatBufferBuilder builder,
      StringOffset labelOffset = default(StringOffset),
      int attribute = 0) {
    builder.StartTable(2);
    AttributeDefinition.AddAttribute(builder, attribute);
    AttributeDefinition.AddLabel(builder, labelOffset);
    return AttributeDefinition.EndAttributeDefinition(builder);
  }

  public static void StartAttributeDefinition(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(0, labelOffset.Value, 0); }
  public static void AddAttribute(FlatBufferBuilder builder, int attribute) { builder.AddInt(1, attribute, 0); }
  public static Offset<API.AttributeDefinition> EndAttributeDefinition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.AttributeDefinition>(o);
  }
};

public struct Handshake : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Handshake GetRootAsHandshake(ByteBuffer _bb) { return GetRootAsHandshake(_bb, new Handshake()); }
  public static Handshake GetRootAsHandshake(ByteBuffer _bb, Handshake obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Handshake __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.HandshakeVersion HandshakeVersion { get { int o = __p.__offset(4); return o != 0 ? (API.HandshakeVersion)__p.bb.GetUint(o + __p.bb_pos) : API.HandshakeVersion.v1; } }
  public API.ProtocolVersion ProtocolVersion { get { int o = __p.__offset(6); return o != 0 ? (API.ProtocolVersion)__p.bb.GetUint(o + __p.bb_pos) : API.ProtocolVersion.v1; } }
  public string UserToken { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserTokenBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUserTokenBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUserTokenArray() { return __p.__vector_as_array<byte>(8); }
  public API.ID? UserId { get { int o = __p.__offset(10); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? SessionId { get { int o = __p.__offset(12); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Url { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(14); }

  public static void StartHandshake(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddHandshakeVersion(FlatBufferBuilder builder, API.HandshakeVersion handshakeVersion) { builder.AddUint(0, (uint)handshakeVersion, 0); }
  public static void AddProtocolVersion(FlatBufferBuilder builder, API.ProtocolVersion protocolVersion) { builder.AddUint(1, (uint)protocolVersion, 0); }
  public static void AddUserToken(FlatBufferBuilder builder, StringOffset userTokenOffset) { builder.AddOffset(2, userTokenOffset.Value, 0); }
  public static void AddUserId(FlatBufferBuilder builder, Offset<API.ID> userIdOffset) { builder.AddStruct(3, userIdOffset.Value, 0); }
  public static void AddSessionId(FlatBufferBuilder builder, Offset<API.ID> sessionIdOffset) { builder.AddStruct(4, sessionIdOffset.Value, 0); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(5, urlOffset.Value, 0); }
  public static Offset<API.Handshake> EndHandshake(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.Handshake>(o);
  }
};

public struct UserAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UserAction GetRootAsUserAction(ByteBuffer _bb) { return GetRootAsUserAction(_bb, new UserAction()); }
  public static UserAction GetRootAsUserAction(ByteBuffer _bb, UserAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.UserActionType Type { get { int o = __p.__offset(4); return o != 0 ? (API.UserActionType)__p.bb.Get(o + __p.bb_pos) : API.UserActionType.Highfive; } }

  public static Offset<API.UserAction> CreateUserAction(FlatBufferBuilder builder,
      API.UserActionType type = API.UserActionType.Highfive) {
    builder.StartTable(1);
    UserAction.AddType(builder, type);
    return UserAction.EndUserAction(builder);
  }

  public static void StartUserAction(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddType(FlatBufferBuilder builder, API.UserActionType type) { builder.AddByte(0, (byte)type, 0); }
  public static Offset<API.UserAction> EndUserAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.UserAction>(o);
  }
};

public struct FireworksMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FireworksMetadata GetRootAsFireworksMetadata(ByteBuffer _bb) { return GetRootAsFireworksMetadata(_bb, new FireworksMetadata()); }
  public static FireworksMetadata GetRootAsFireworksMetadata(ByteBuffer _bb, FireworksMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FireworksMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (API.Vec3?)(new API.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFireworksMetadata(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<API.Vec3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static Offset<API.FireworksMetadata> EndFireworksMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.FireworksMetadata>(o);
  }
};

public struct HighfiveMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static HighfiveMetadata GetRootAsHighfiveMetadata(ByteBuffer _bb) { return GetRootAsHighfiveMetadata(_bb, new HighfiveMetadata()); }
  public static HighfiveMetadata GetRootAsHighfiveMetadata(ByteBuffer _bb, HighfiveMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HighfiveMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? User1 { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? User2 { get { int o = __p.__offset(6); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartHighfiveMetadata(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUser1(FlatBufferBuilder builder, Offset<API.ID> user1Offset) { builder.AddStruct(0, user1Offset.Value, 0); }
  public static void AddUser2(FlatBufferBuilder builder, Offset<API.ID> user2Offset) { builder.AddStruct(1, user2Offset.Value, 0); }
  public static Offset<API.HighfiveMetadata> EndHighfiveMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.HighfiveMetadata>(o);
  }
};

public struct WowMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WowMetadata GetRootAsWowMetadata(ByteBuffer _bb) { return GetRootAsWowMetadata(_bb, new WowMetadata()); }
  public static WowMetadata GetRootAsWowMetadata(ByteBuffer _bb, WowMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WowMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? StructureId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.WowType Type { get { int o = __p.__offset(6); return o != 0 ? (API.WowType)__p.bb.Get(o + __p.bb_pos) : API.WowType.Positive; } }

  public static void StartWowMetadata(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStructureId(FlatBufferBuilder builder, Offset<API.ID> structureIdOffset) { builder.AddStruct(0, structureIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, API.WowType type) { builder.AddByte(1, (byte)type, 0); }
  public static Offset<API.WowMetadata> EndWowMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.WowMetadata>(o);
  }
};

public struct On3DAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static On3DAction GetRootAsOn3DAction(ByteBuffer _bb) { return GetRootAsOn3DAction(_bb, new On3DAction()); }
  public static On3DAction GetRootAsOn3DAction(ByteBuffer _bb, On3DAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public On3DAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.UserActionType Type { get { int o = __p.__offset(4); return o != 0 ? (API.UserActionType)__p.bb.Get(o + __p.bb_pos) : API.UserActionType.Highfive; } }
  public API.ActionMetadata DataType { get { int o = __p.__offset(6); return o != 0 ? (API.ActionMetadata)__p.bb.Get(o + __p.bb_pos) : API.ActionMetadata.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public API.FireworksMetadata DataAsFireworksMetadata() { return Data<API.FireworksMetadata>().Value; }
  public API.HighfiveMetadata DataAsHighfiveMetadata() { return Data<API.HighfiveMetadata>().Value; }
  public API.WowMetadata DataAsWowMetadata() { return Data<API.WowMetadata>().Value; }

  public static Offset<API.On3DAction> CreateOn3DAction(FlatBufferBuilder builder,
      API.UserActionType type = API.UserActionType.Highfive,
      API.ActionMetadata data_type = API.ActionMetadata.NONE,
      int dataOffset = 0) {
    builder.StartTable(3);
    On3DAction.AddData(builder, dataOffset);
    On3DAction.AddDataType(builder, data_type);
    On3DAction.AddType(builder, type);
    return On3DAction.EndOn3DAction(builder);
  }

  public static void StartOn3DAction(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddType(FlatBufferBuilder builder, API.UserActionType type) { builder.AddByte(0, (byte)type, 0); }
  public static void AddDataType(FlatBufferBuilder builder, API.ActionMetadata dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<API.On3DAction> EndOn3DAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.On3DAction>(o);
  }
};

public struct SetObjectTextures : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetObjectTextures GetRootAsSetObjectTextures(ByteBuffer _bb) { return GetRootAsSetObjectTextures(_bb, new SetObjectTextures()); }
  public static SetObjectTextures GetRootAsSetObjectTextures(ByteBuffer _bb, SetObjectTextures obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetObjectTextures __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? ObjectId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.TextureDefinition? Objects(int j) { int o = __p.__offset(6); return o != 0 ? (API.TextureDefinition?)(new API.TextureDefinition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartSetObjectTextures(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddObjectId(FlatBufferBuilder builder, Offset<API.ID> objectIdOffset) { builder.AddStruct(0, objectIdOffset.Value, 0); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(1, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<API.TextureDefinition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<API.TextureDefinition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.SetObjectTextures> EndSetObjectTextures(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.SetObjectTextures>(o);
  }
};

public struct SetObjectStrings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetObjectStrings GetRootAsSetObjectStrings(ByteBuffer _bb) { return GetRootAsSetObjectStrings(_bb, new SetObjectStrings()); }
  public static SetObjectStrings GetRootAsSetObjectStrings(ByteBuffer _bb, SetObjectStrings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetObjectStrings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? ObjectId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.StringDefinition? Objects(int j) { int o = __p.__offset(6); return o != 0 ? (API.StringDefinition?)(new API.StringDefinition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartSetObjectStrings(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddObjectId(FlatBufferBuilder builder, Offset<API.ID> objectIdOffset) { builder.AddStruct(0, objectIdOffset.Value, 0); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(1, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<API.StringDefinition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<API.StringDefinition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.SetObjectStrings> EndSetObjectStrings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.SetObjectStrings>(o);
  }
};

public struct InteractonTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static InteractonTrigger GetRootAsInteractonTrigger(ByteBuffer _bb) { return GetRootAsInteractonTrigger(_bb, new InteractonTrigger()); }
  public static InteractonTrigger GetRootAsInteractonTrigger(ByteBuffer _bb, InteractonTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InteractonTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? SpaceId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Label { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(6); }
  public string Metadata { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMetadataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMetadataArray() { return __p.__vector_as_array<byte>(8); }

  public static void StartInteractonTrigger(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSpaceId(FlatBufferBuilder builder, Offset<API.ID> spaceIdOffset) { builder.AddStruct(0, spaceIdOffset.Value, 0); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(1, labelOffset.Value, 0); }
  public static void AddMetadata(FlatBufferBuilder builder, StringOffset metadataOffset) { builder.AddOffset(2, metadataOffset.Value, 0); }
  public static Offset<API.InteractonTrigger> EndInteractonTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.InteractonTrigger>(o);
  }
};

public struct DecorationMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DecorationMetadata GetRootAsDecorationMetadata(ByteBuffer _bb) { return GetRootAsDecorationMetadata(_bb, new DecorationMetadata()); }
  public static DecorationMetadata GetRootAsDecorationMetadata(ByteBuffer _bb, DecorationMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DecorationMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? AssetId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.PosRot? Pos { get { int o = __p.__offset(6); return o != 0 ? (API.PosRot?)(new API.PosRot()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartDecorationMetadata(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAssetId(FlatBufferBuilder builder, Offset<API.ID> assetIdOffset) { builder.AddStruct(0, assetIdOffset.Value, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<API.PosRot> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static Offset<API.DecorationMetadata> EndDecorationMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.DecorationMetadata>(o);
  }
};

public struct SetWorld : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetWorld GetRootAsSetWorld(ByteBuffer _bb) { return GetRootAsSetWorld(_bb, new SetWorld()); }
  public static SetWorld GetRootAsSetWorld(ByteBuffer _bb, SetWorld obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetWorld __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? WorldId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public API.ID? AvatarControllerId { get { int o = __p.__offset(8); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? SkyboxControllerId { get { int o = __p.__offset(10); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public uint LodDistances(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int LodDistancesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetLodDistancesBytes() { return __p.__vector_as_span<uint>(12, 4); }
#else
  public ArraySegment<byte>? GetLodDistancesBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public uint[] GetLodDistancesArray() { return __p.__vector_as_array<uint>(12); }
  public API.DecorationMetadata? Decorations(int j) { int o = __p.__offset(14); return o != 0 ? (API.DecorationMetadata?)(new API.DecorationMetadata()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecorationsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartSetWorld(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddWorldId(FlatBufferBuilder builder, Offset<API.ID> worldIdOffset) { builder.AddStruct(0, worldIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddAvatarControllerId(FlatBufferBuilder builder, Offset<API.ID> avatarControllerIdOffset) { builder.AddStruct(2, avatarControllerIdOffset.Value, 0); }
  public static void AddSkyboxControllerId(FlatBufferBuilder builder, Offset<API.ID> skyboxControllerIdOffset) { builder.AddStruct(3, skyboxControllerIdOffset.Value, 0); }
  public static void AddLodDistances(FlatBufferBuilder builder, VectorOffset lodDistancesOffset) { builder.AddOffset(4, lodDistancesOffset.Value, 0); }
  public static VectorOffset CreateLodDistancesVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLodDistancesVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLodDistancesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecorations(FlatBufferBuilder builder, VectorOffset decorationsOffset) { builder.AddOffset(5, decorationsOffset.Value, 0); }
  public static VectorOffset CreateDecorationsVector(FlatBufferBuilder builder, Offset<API.DecorationMetadata>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecorationsVectorBlock(FlatBufferBuilder builder, Offset<API.DecorationMetadata>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDecorationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.SetWorld> EndSetWorld(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.SetWorld>(o);
  }
};

public struct ObjectDefinition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ObjectDefinition GetRootAsObjectDefinition(ByteBuffer _bb) { return GetRootAsObjectDefinition(_bb, new ObjectDefinition()); }
  public static ObjectDefinition GetRootAsObjectDefinition(ByteBuffer _bb, ObjectDefinition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectDefinition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? ObjectId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public API.Vec3? Position { get { int o = __p.__offset(8); return o != 0 ? (API.Vec3?)(new API.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? ParentId { get { int o = __p.__offset(10); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? AssetType { get { int o = __p.__offset(12); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool TetheredToParent { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Minimap { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public API.ID? InfouiType { get { int o = __p.__offset(18); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartObjectDefinition(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddObjectId(FlatBufferBuilder builder, Offset<API.ID> objectIdOffset) { builder.AddStruct(0, objectIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<API.Vec3> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddParentId(FlatBufferBuilder builder, Offset<API.ID> parentIdOffset) { builder.AddStruct(3, parentIdOffset.Value, 0); }
  public static void AddAssetType(FlatBufferBuilder builder, Offset<API.ID> assetTypeOffset) { builder.AddStruct(4, assetTypeOffset.Value, 0); }
  public static void AddTetheredToParent(FlatBufferBuilder builder, bool tetheredToParent) { builder.AddBool(5, tetheredToParent, false); }
  public static void AddMinimap(FlatBufferBuilder builder, bool minimap) { builder.AddBool(6, minimap, false); }
  public static void AddInfouiType(FlatBufferBuilder builder, Offset<API.ID> infouiTypeOffset) { builder.AddStruct(7, infouiTypeOffset.Value, 0); }
  public static Offset<API.ObjectDefinition> EndObjectDefinition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.ObjectDefinition>(o);
  }
};

public struct AddStaticObjects : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AddStaticObjects GetRootAsAddStaticObjects(ByteBuffer _bb) { return GetRootAsAddStaticObjects(_bb, new AddStaticObjects()); }
  public static AddStaticObjects GetRootAsAddStaticObjects(ByteBuffer _bb, AddStaticObjects obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AddStaticObjects __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ObjectDefinition? Objects(int j) { int o = __p.__offset(4); return o != 0 ? (API.ObjectDefinition?)(new API.ObjectDefinition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<API.AddStaticObjects> CreateAddStaticObjects(FlatBufferBuilder builder,
      VectorOffset objectsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AddStaticObjects.AddObjects(builder, objectsOffset);
    return AddStaticObjects.EndAddStaticObjects(builder);
  }

  public static void StartAddStaticObjects(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(0, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<API.ObjectDefinition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<API.ObjectDefinition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.AddStaticObjects> EndAddStaticObjects(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.AddStaticObjects>(o);
  }
};

public struct ActiveObjectMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ActiveObjectMetadata GetRootAsActiveObjectMetadata(ByteBuffer _bb) { return GetRootAsActiveObjectMetadata(_bb, new ActiveObjectMetadata()); }
  public static ActiveObjectMetadata GetRootAsActiveObjectMetadata(ByteBuffer _bb, ActiveObjectMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActiveObjectMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? Id { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.ID? Type { get { int o = __p.__offset(6); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Meta { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetaBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMetaBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMetaArray() { return __p.__vector_as_array<byte>(8); }

  public static void StartActiveObjectMetadata(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, Offset<API.ID> idOffset) { builder.AddStruct(0, idOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Offset<API.ID> typeOffset) { builder.AddStruct(1, typeOffset.Value, 0); }
  public static void AddMeta(FlatBufferBuilder builder, StringOffset metaOffset) { builder.AddOffset(2, metaOffset.Value, 0); }
  public static Offset<API.ActiveObjectMetadata> EndActiveObjectMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.ActiveObjectMetadata>(o);
  }
};

public struct AddActiveObjects : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AddActiveObjects GetRootAsAddActiveObjects(ByteBuffer _bb) { return GetRootAsAddActiveObjects(_bb, new AddActiveObjects()); }
  public static AddActiveObjects GetRootAsAddActiveObjects(ByteBuffer _bb, AddActiveObjects obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AddActiveObjects __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ActiveObjectMetadata? Objects(int j) { int o = __p.__offset(4); return o != 0 ? (API.ActiveObjectMetadata?)(new API.ActiveObjectMetadata()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<API.AddActiveObjects> CreateAddActiveObjects(FlatBufferBuilder builder,
      VectorOffset objectsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AddActiveObjects.AddObjects(builder, objectsOffset);
    return AddActiveObjects.EndAddActiveObjects(builder);
  }

  public static void StartAddActiveObjects(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(0, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<API.ActiveObjectMetadata>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<API.ActiveObjectMetadata>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.AddActiveObjects> EndAddActiveObjects(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.AddActiveObjects>(o);
  }
};

public struct SetObjectAttributes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetObjectAttributes GetRootAsSetObjectAttributes(ByteBuffer _bb) { return GetRootAsSetObjectAttributes(_bb, new SetObjectAttributes()); }
  public static SetObjectAttributes GetRootAsSetObjectAttributes(ByteBuffer _bb, SetObjectAttributes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetObjectAttributes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.ID? SpaceId { get { int o = __p.__offset(4); return o != 0 ? (API.ID?)(new API.ID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public API.AttributeDefinition? Objects(int j) { int o = __p.__offset(6); return o != 0 ? (API.AttributeDefinition?)(new API.AttributeDefinition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartSetObjectAttributes(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSpaceId(FlatBufferBuilder builder, Offset<API.ID> spaceIdOffset) { builder.AddStruct(0, spaceIdOffset.Value, 0); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(1, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<API.AttributeDefinition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<API.AttributeDefinition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<API.SetObjectAttributes> EndSetObjectAttributes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.SetObjectAttributes>(o);
  }
};

public struct FlatBuffMsg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FlatBuffMsg GetRootAsFlatBuffMsg(ByteBuffer _bb) { return GetRootAsFlatBuffMsg(_bb, new FlatBuffMsg()); }
  public static FlatBuffMsg GetRootAsFlatBuffMsg(ByteBuffer _bb, FlatBuffMsg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlatBuffMsg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public API.Msg MsgType { get { int o = __p.__offset(4); return o != 0 ? (API.Msg)__p.bb.Get(o + __p.bb_pos) : API.Msg.NONE; } }
  public TTable? Msg<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public API.Handshake MsgAsHandshake() { return Msg<API.Handshake>().Value; }
  public API.UserAction MsgAsUserAction() { return Msg<API.UserAction>().Value; }
  public API.On3DAction MsgAsOn3DAction() { return Msg<API.On3DAction>().Value; }
  public API.InteractonTrigger MsgAsInteractonTrigger() { return Msg<API.InteractonTrigger>().Value; }
  public API.SetWorld MsgAsSetWorld() { return Msg<API.SetWorld>().Value; }
  public API.ObjectDefinition MsgAsObjectDefinition() { return Msg<API.ObjectDefinition>().Value; }
  public API.AddStaticObjects MsgAsAddStaticObjects() { return Msg<API.AddStaticObjects>().Value; }
  public API.AddActiveObjects MsgAsAddActiveObjects() { return Msg<API.AddActiveObjects>().Value; }
  public API.SetObjectTextures MsgAsSetObjectTextures() { return Msg<API.SetObjectTextures>().Value; }
  public API.SetObjectStrings MsgAsSetObjectStrings() { return Msg<API.SetObjectStrings>().Value; }
  public API.SetObjectAttributes MsgAsSetObjectAttributes() { return Msg<API.SetObjectAttributes>().Value; }

  public static Offset<API.FlatBuffMsg> CreateFlatBuffMsg(FlatBufferBuilder builder,
      API.Msg msg_type = API.Msg.NONE,
      int msgOffset = 0) {
    builder.StartTable(2);
    FlatBuffMsg.AddMsg(builder, msgOffset);
    FlatBuffMsg.AddMsgType(builder, msg_type);
    return FlatBuffMsg.EndFlatBuffMsg(builder);
  }

  public static void StartFlatBuffMsg(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMsgType(FlatBufferBuilder builder, API.Msg msgType) { builder.AddByte(0, (byte)msgType, 0); }
  public static void AddMsg(FlatBufferBuilder builder, int msgOffset) { builder.AddOffset(1, msgOffset, 0); }
  public static Offset<API.FlatBuffMsg> EndFlatBuffMsg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<API.FlatBuffMsg>(o);
  }
  public static void FinishFlatBuffMsgBuffer(FlatBufferBuilder builder, Offset<API.FlatBuffMsg> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFlatBuffMsgBuffer(FlatBufferBuilder builder, Offset<API.FlatBuffMsg> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
